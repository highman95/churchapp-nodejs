#!/usr/bin/env node

// Module dependencies.
const app = require("../src");
const http = require("http");
const cluster = require("cluster");
const numOfCPUs = require("os").cpus().length;

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// Create HTTP server.
const server = http.createServer(app);

if (cluster.isMaster) {
  console.log(`Master process --> ${process.pid} running...`);
  for (let i = 0; i < numOfCPUs; i++) {
    cluster.fork();
  }

  cluster.on("exit", (worker) => {
    console.error(`Worker process --> ${worker.process.pid} ended...`);
    cluster.fork();
  });
} else {
  // Listen on provided port, on all network interfaces.
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
}

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const portNumber = parseInt(val, 10);

  if (isNaN(portNumber)) {
    // named pipe
    return val;
  }

  if (portNumber >= 0) {
    // port number
    return portNumber;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event
function onListening() {
  const addr = server.address();
  const gist = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening @ ${gist}`);
}

module.exports = server;
